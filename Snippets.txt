//		mockMvc.perform(post("/employee/add").contentType(MediaType.APPLICATION_JSON)
//						.content(objectMapper.writeValueAsString(reinRequest)))
//				.andExpect(status().isCreated())
//				.andExpect(jsonPath("$.name").value("Reinhart"))
//				.andExpect(jsonPath("$.email").value(rein.getName()))
//				.andExpect(jsonPath("$.number").value(rein.getNumber()))
//				.andExpect(jsonPath("$.gender").value(rein.getGender()))
//				.andExpect(jsonPath("$.age").value(rein.getAge()))
//				.andExpect(jsonPath("$.birthday").value(rein.getBirthday()));



String jsonRequest = objectMapper.writeValueAsString(reinRequest);
		MvcResult result = mockMvc
				.perform(post("/employee/add").content(jsonRequest).contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk()).andReturn();

		String resultContent = result.getResponse().getContentAsString();
		Employee responseEmp = objectMapper.readValue(resultContent, Employee.class);
		Employee checker = Employee.build(responseEmp.getId(), rein.getName(), rein.getEmail(), rein.getNumber(),
				rein.getGender(), rein.getAge(), rein.getBirthday());
		log.info(resultContent);
		assertThat(responseEmp).usingRecursiveComparison().isEqualTo(checker);
		
		
		//		when(employeeService.SaveEmployee(any(EmployeeRequest.class))).thenReturn(rein);
//
//		this.mockMvc
//				.perform(post("/employee/add").contentType(MediaType.APPLICATION_JSON)
//						.content(objectMapper.writeValueAsString(reinRequest)))
//				.andExpect(status().isOk()).andExpect(jsonPath("$.name").value(reinRequest.getName()))
//				.andExpect(jsonPath("$.email").value(reinRequest.getEmail()))
//				.andExpect(jsonPath("$.number").value(reinRequest.getNumber()))
//				.andExpect(jsonPath("$.gender").value(reinRequest.getGender()))
//				.andExpect(jsonPath("$.age").value(reinRequest.getAge()));



// .andExpect(jsonPath("$.birthday")
		// .value(LocalDate.parse(reinRequest.getBirthday().toString(),
		// formatForJson).toString()));
		
		
		
		
		
		@Test
	void shouldUpdateEmployee() throws Exception {
		LocalDate birthday = LocalDate.parse("02-10-1997", formatter);
		
		EmployeeRequest reinRequestUpdate =  EmployeeRequest.build("Reinhart", "janreinhartp@gmail.com", "09367254168", "Male", 25, birthday);
		Employee employeeToUpdate = Employee.build(1, reinRequestUpdate.getName(), reinRequestUpdate.getEmail(), reinRequestUpdate.getNumber(),
				reinRequestUpdate.getGender(), reinRequestUpdate.getAge(), reinRequestUpdate.getBirthday());
		
		
		
		when(service.updateEmployee(employeeToUpdate)).thenReturn(employeeToUpdate);
		
		mockMvc.perform(MockMvcRequestBuilders.put("/employee/update/{id}", bodyFromResponseFromAdd.getId())
				.content(objectMapper.writeValueAsString(reinRequestUpdate))
				.contentType(MediaType.APPLICATION_JSON_VALUE))
		.andExpect(status().isOk()).andReturn();
		
	}
	
	
	
	
	@Test
	void shouldGetEmployee() throws Exception {
		
		LocalDate birthday = LocalDate.parse("02-10-1997", formatter);
		Employee employeeToA = Employee.build(1, "Ren", "abc@email.com", "09367254168",
				"Male", 25, birthday);
		Employee employeeToB = Employee.build(2, "Ren Ren", "abc@email.com", "09367254168",
				"Male", 25, birthday);
		
		List<Employee> listOfEmployee = new ArrayList<>();
		
		listOfEmployee.add(employeeToA);
		listOfEmployee.add(employeeToB);
		
		when(service.getAllEmployee()).thenReturn(listOfEmployee);
		
		
		MvcResult resultFromGet = mockMvc.perform(MockMvcRequestBuilders
				.get("/employee/fetchAll", 1).contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk()).andReturn();
		
		String resultContentFromGet = resultFromGet.getResponse().getContentAsString();
		
		List<Employee> employeeList = objectMapper.readValue(resultContentFromGet, new TypeReference<List<Employee>>() {
		});
		
		assertThat(employeeList).isNotEmpty();
	}
	
	@Test
	void shouldUpdateEmployee() throws Exception {
		
		LocalDate birthday = LocalDate.parse("02-10-1997", formatter);
		EmployeeRequest reinRequest =  EmployeeRequest.build("Reinhart", "janreinhartp@gmail.com", "09367254168", "Male", 25, birthday);
		
		Employee employeeToA = Employee.build(1, "Ren", "abc@email.com", "09367254168",
				"Male", 25, birthday);
		Employee employeeToB = Employee.build(1, "Ren Ren", "abc@email.com", "09367254168",
				"Male", 25, birthday);
		
		when(repo.save(any(Employee.class))).thenReturn(employeeToB);
		
		MvcResult resultFromGet = mockMvc.perform(MockMvcRequestBuilders.put("/employee/update/{ID}", employeeToA.getId())
						.content(objectMapper.writeValueAsString(reinRequest))
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk()).andReturn();

		String resultContentFromGet = resultFromGet.getResponse().getContentAsString();
		Employee bodyFromResponseFromGet = objectMapper.readValue(resultContentFromGet, Employee.class);
		
		assertThat(bodyFromResponseFromGet).usingRecursiveComparison().isNotEqualTo(employeeToB);
	}
	
	@Test
	void shouldDeleteEmployee() throws Exception {
		LocalDate birthday = LocalDate.parse("02-10-1997", formatter);
		Employee employeeToA = Employee.build(1, "Ren", "abc@email.com", "09367254168",
				"Male", 25, birthday);
		
		when(service.deleteEmployee(1)).thenReturn("Employee with id " + employeeToA.getId() + " is successfully Deleted");
		
		MvcResult resultFromDelete = mockMvc
				.perform(MockMvcRequestBuilders.delete("/employee/delete/{id}", 1)
						.contentType(MediaType.APPLICATION_JSON_VALUE))
				.andExpect(status().isOk()).andReturn();

		String resultContentFromDelete = resultFromDelete.getResponse().getContentAsString();

		assertEquals(resultContentFromDelete,
				"Employee with id " + employeeToA.getId() + " is successfully Deleted");

	}