package com.janreinhartp.TestEmployeeAPI.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.janreinhartp.TestEmployeeAPI.DTO.EmployeeRequest;
import com.janreinhartp.TestEmployeeAPI.Entity.Employee;
import com.janreinhartp.TestEmployeeAPI.Exception.EmployeeException;
import com.janreinhartp.TestEmployeeAPI.Service.EmployeeService;

@RestController
@RequestMapping("/employee")
public class EmployeeController {
	@Autowired
	private EmployeeService service;

	@PostMapping("/add")
	public ResponseEntity<Employee> saveEmployee(
		@RequestBody EmployeeRequest employeeRequest)
		throws EmployeeException {
		return new ResponseEntity<>(
		service.saveEmployee(service.validateAddRequest(
		employeeRequest)), HttpStatus.CREATED);
	}

	@GetMapping("/fetchAll")
	public ResponseEntity<List<Employee>> getAllEmployee() {
		return ResponseEntity.ok(service.getAllEmployee());
	}

	@GetMapping("/{id}")
	public ResponseEntity<Optional<Employee>> getEmployee(@PathVariable int id) {
		return ResponseEntity.ok(service.getEmployee(id));
	}

	@PutMapping("/update/{ID}")
	public ResponseEntity<Employee> updateEmployee(
	@PathVariable int id,@RequestBody EmployeeRequest employeeRequest)
	throws EmployeeException {
		Employee toUpdate = Employee.build(id, employeeRequest.getName(),
				employeeRequest.getEmail(),employeeRequest.getNumber(),
				employeeRequest.getGender(), employeeRequest.getAge(),
				employeeRequest.getBirthday());
		return new ResponseEntity<Employee>(service.updateEmployee(
				service.validateUpdateRequest(toUpdate)), HttpStatus.OK);
	}

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<String> deleteEmployee(@PathVariable int id) {
		return ResponseEntity.ok(service.deleteEmployee(id));
	}

	@GetMapping("/reset")
	public String resetDBS() {
		return service.resetDBS();
	}

}
